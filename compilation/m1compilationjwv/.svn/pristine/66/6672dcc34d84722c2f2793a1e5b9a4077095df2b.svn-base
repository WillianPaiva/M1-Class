// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
/*
-----------------------------------------------------------------------
-                                types                                -
-----------------------------------------------------------------------
*/
terminal PROC,STRUCT, MAIN, INT, CHAR, FLOAT,STRING, BOOL, LIST, POINTER, CLASS;
/*
-----------------------------------------------------------------------
-                             opareators                              -
-----------------------------------------------------------------------
*/
terminal MULT, MOD, MIN, DIV, NOT, AND, TRUE, FALSE, NULL,INF, PLUS, SUP, OR;
terminal EQ, EQUALS, GEQL, LEQL, DIFF;
/*
-----------------------------------------------------------------------
-                             separators                              -
-----------------------------------------------------------------------
*/
terminal LPAR,RPAR,SEMIC,NEWBLOCK,ENDBLOCK, COMMA; 
terminal IF, ELSE, WHILE, EXIT, RETURN;
/*
-----------------------------------------------------------------------
-                              specials                               -
-----------------------------------------------------------------------
*/
terminal String STR; 
terminal String ID;
terminal Integer NB;



/* The grammar */
non terminal expr, term, factor;
non terminal axiom, axioms, keyword, typekeyword, complextype;

precedence left OR,AND;
precedence left PLUS, MIN;
precedence left MULT, DIV, MOD;
precedence nonassoc EQUALS, DIFF, LEQL , GEQL , INF , SUP ,NOT; 




start with axioms;

axioms ::=	axiom:t1 axioms:t2
       		{}
       		| axiom:t
            {}
            ;

axiom ::=       expr:t SEMIC
                {: System.out.println("Reduction axiom -> expr SEMIC"); :}
		| keyword:t SEMIC
		{: System.out.println("Reduction axiom -> keyword SEMIC"); :}
		| typekeyword:t SEMIC
		{: System.out.println("Reduction axiom -> typekeyword SEMIC"); :}
		| complextype:t SEMIC
		{: System.out.println("Reduction axiom -> complextype SEMIC"); :}
                ;

expr ::=        expr:t1 PLUS term:t2
                {: System.out.println("Reduction expr -> expr + term"); :}    
                | term:t
                {: System.out.println("Reduction expr -> term"); :}     
                ;

term ::=        term:t1 MULT  factor:t2
                {: System.out.println("Reduction terme -> terme MULT facteur"); :}
                | factor:t
                {: System.out.println("Reduction terme -> facteur"); :} 
                ;

factor ::=      LPAR expr:t  RPAR
                {: System.out.println("Reduction factor -> LPAR expr RPAR"); :} 
                | ID:t
                {: System.out.println("Reduction factor -> ID"); :} 
                ;

keyword ::=	PROC:t
		{: System.out.println("Reduction keyword -> procedure"); :}
		| MAIN:t
		{: System.out.println("Reduction keyword -> main"); :}
		;

typekeyword ::=	INT:t
     		{: System.out.println("Reduction typekeyword -> integer"); :}
		| CHAR:t
     		{: System.out.println("Reduction typekeyword -> character"); :}
		| FLOAT:t
     		{: System.out.println("Reduction typekeyword -> float"); :}
		| BOOL:t
     		{: System.out.println("Reduction typekeyword -> boolean"); :}
		| STR:t
     		{: System.out.println("Reduction typekeyword -> string"); :}
		;

complextype ::=		| CLASS:t
     			{: System.out.println("Reduction complextype -> class"); :}
			| LIST:t
			{: System.out.println("Reduction complextype -> list of"); :}
			| POINTER:t
			{: System.out.println("Reduction complextype -> ^"); :}
			| STRUCT:t
			{: System.out.println("Reduction complextype -> structure"); :}
			;
