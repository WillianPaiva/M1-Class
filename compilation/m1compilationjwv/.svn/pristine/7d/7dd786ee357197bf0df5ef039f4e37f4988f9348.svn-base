
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 07 10:54:38 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import stree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 07 10:54:38 CEST 2015
  */
public class MyCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyCParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\005\004\000\002\005" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\002\005\000\002\002\003\000\002\003\005\000" +
    "\002\003\003\000\002\004\005\000\002\004\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\016\003\015\004\010\005\006\006\004\007" +
    "\011\014\013\001\002\000\004\011\ufff3\001\002\000\020" +
    "\002\031\003\015\004\010\005\006\006\004\007\011\014" +
    "\013\001\002\000\004\011\ufff4\001\002\000\012\010\ufffa" +
    "\011\ufffa\012\ufffa\013\023\001\002\000\004\011\ufff5\001" +
    "\002\000\006\007\011\014\013\001\002\000\004\011\026" +
    "\001\002\000\012\010\ufff6\011\ufff6\012\ufff6\013\ufff6\001" +
    "\002\000\012\010\ufff8\011\ufff8\012\ufff8\013\ufff8\001\002" +
    "\000\004\011\025\001\002\000\020\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\014\uffff\001\002\000\006" +
    "\011\021\012\020\001\002\000\006\007\011\014\013\001" +
    "\002\000\020\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\014\ufffe\001\002\000\012\010\ufffb\011\ufffb\012" +
    "\ufffb\013\023\001\002\000\006\007\011\014\013\001\002" +
    "\000\012\010\ufff9\011\ufff9\012\ufff9\013\ufff9\001\002\000" +
    "\020\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\014\ufffc\001\002\000\020\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\014\ufffd\001\002\000\006\010\030" +
    "\012\020\001\002\000\012\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\001\002\000\004\002\001\001\002\000\020\002\000" +
    "\003\000\004\000\005\000\006\000\007\000\014\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\016\002\016\003\006\004\013\005\004\006" +
    "\015\007\011\001\001\000\002\001\001\000\014\002\016" +
    "\003\006\004\013\006\031\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\026" +
    "\003\006\004\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\021\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean do_debug_parse = false;

  public void debug_message(String mess){
    System.err.println(mess);
  }

  public void syntax_error(Symbol cur_token){
    report_error("Syntax error at character "+(cur_token.right +1)+" on line "+(cur_token.left+1),null);
  }

  public void unrecovered_syntax_error(Symbol cur_token)
    throws java.lang.Exception{
    report_fatal_error("Couldn't repair and continue parse at character "+(cur_token.right +1)+" on line "+(cur_token.left+1),null);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyCParser$actions {
  private final MyCParser parser;

  /** Constructor */
  CUP$MyCParser$actions(MyCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyCParser$do_action(
    int                        CUP$MyCParser$act_num,
    java_cup.runtime.lr_parser CUP$MyCParser$parser,
    java.util.Stack            CUP$MyCParser$stack,
    int                        CUP$MyCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyCParser$result;

      /* select the action based on the action number */
      switch (CUP$MyCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // keyword ::= WHILE 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=t;
		   System.out.println("Reduction keyword -> WHILE"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("keyword",5, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // keyword ::= MAIN 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=t;
		   System.out.println("Reduction keyword -> MAIN"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("keyword",5, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // keyword ::= PROCEDURE 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=t;
		   System.out.println("Reduction keyword -> PROCEDURE"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("keyword",5, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // factor ::= ID 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=t;
		   System.out.println("Reduction factor -> ID"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // factor ::= LPAR expr RPAR 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).value;
		 RESULT=t;
		   System.out.println("Reduction factor -> LPAR expr RPAR"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= factor 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=t;
		   System.out.println("Reduction terme -> facteur"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= term MULT factor 
            {
              Stree RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)).right;
		Stree t1 = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t2 = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=new Stree(EnumTag.MULT,t1,t2,null);
		   System.out.println("Reduction terme -> terme MULT facteur"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= term 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=t;
		   System.out.println("Reduction expr -> term"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS term 
            {
              Stree RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)).right;
		Stree t1 = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t2 = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=new Stree(EnumTag.PLUS,t1,t2,null);
		   System.out.println("Reduction expr -> expr + term"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= error SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).value;

              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("axiom",4, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= keyword SEMIC 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).value;
		 RESULT=t;
		   System.out.println("Reduction axiom -> keyword SEMIC"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("axiom",4, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= expr SEMIC 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).value;
		 RESULT=t;
		   System.out.println("Reduction axiom -> expr SEMIC"); 
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("axiom",4, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // axioms ::= axiom 
            {
              Stree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=t;
		
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("axioms",3, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axioms ::= axioms axiom 
            {
              Stree RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).right;
		Stree t1 = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()).right;
		Stree t2 = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.peek()).value;
		 RESULT=new Stree(EnumTag.SUCC,t1,t2,null);
		
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("axioms",3, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          return CUP$MyCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axioms EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).right;
		Stree start_val = (Stree)((java_cup.runtime.Symbol) CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)).value;
		RESULT = start_val;
              CUP$MyCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyCParser$stack.elementAt(CUP$MyCParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyCParser$parser.done_parsing();
          return CUP$MyCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

