
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 09 18:55:13 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 09 18:55:13 CEST 2015
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\004\003\000\002\004" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\002" +
    "\000\002\006\005\000\002\006\007\000\002\006\005\000" +
    "\002\006\007\000\002\006\006\000\002\006\006\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\006\000\002\006\005\000\002\006\007\000\002" +
    "\006\011\000\002\006\007\000\002\006\013\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\005\003\000\002\005\005\000\002\005\002\000" +
    "\002\013\007\000\002\014\005\000\002\007\010\000\002" +
    "\010\005\000\002\011\005\000\002\011\007\000\002\011" +
    "\002\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\060\002\ufffc\004\027\006\ufffc\007\010\010" +
    "\012\011\025\012\030\013\031\016\006\017\035\024\014" +
    "\026\017\027\026\030\034\045\036\053\020\055\011\056" +
    "\005\057\015\060\033\061\023\062\022\063\007\001\002" +
    "\000\122\002\ufffc\004\027\006\ufffc\007\010\010\012\011" +
    "\025\012\030\013\031\016\006\017\035\020\042\021\043" +
    "\022\055\023\046\024\014\025\041\026\017\027\026\030" +
    "\034\031\047\032\045\033\056\034\054\036\053\037\057" +
    "\040\050\041\051\043\040\044\044\045\036\047\203\051" +
    "\ufffc\053\020\055\011\056\005\057\015\060\033\061\023" +
    "\062\022\063\007\001\002\000\126\002\uffd7\004\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\001\002\000\004\062\201\001\002\000\126\002\uffe2" +
    "\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\001\002\000\130\002\uffca\004\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca" +
    "\053\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\001\002\000\004\045\175\001\002\000\130" +
    "\002\uffc9\004\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\001\002\000\004\062" +
    "\170\001\002\000\054\004\027\007\010\010\012\011\025" +
    "\012\030\013\031\016\006\017\035\024\014\026\017\027" +
    "\026\030\034\045\036\053\020\055\011\056\005\057\015" +
    "\060\033\061\023\062\022\063\007\001\002\000\054\004" +
    "\027\007\010\010\012\011\025\012\030\013\031\016\006" +
    "\017\035\024\014\026\017\027\026\030\034\045\036\053" +
    "\020\055\011\056\005\057\015\060\033\061\023\062\022" +
    "\063\007\001\002\000\126\002\uffd6\004\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\001" +
    "\002\000\126\002\uffe4\004\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\001\002\000\004" +
    "\045\160\001\002\000\004\002\157\001\002\000\132\002" +
    "\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\140\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\142\043\uffdf\044\uffdf\045\141\046\uffdf" +
    "\047\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000\126" +
    "\002\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\001\002\000\126\002\uffd5\004" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\001\002\000\130\002\uffc8\004\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\001\002\000\126\002\uffe3\004\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\001" +
    "\002\000\130\002\uffc5\004\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\016\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002" +
    "\000\130\002\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002\000" +
    "\130\002\uffc7\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000\006" +
    "\002\000\006\125\001\002\000\004\045\114\001\002\000" +
    "\126\002\uffe0\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\001\002\000\004\062\075" +
    "\001\002\000\054\004\027\007\010\010\012\011\025\012" +
    "\030\013\031\016\006\017\035\024\014\026\017\027\026" +
    "\030\034\045\036\053\020\055\011\056\005\057\015\060" +
    "\033\061\023\062\022\063\007\001\002\000\042\020\042" +
    "\021\043\022\055\023\046\025\041\031\047\032\045\033" +
    "\056\034\054\036\053\037\057\040\050\041\051\043\040" +
    "\044\044\046\052\001\002\000\126\002\uffe7\004\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\001\002\000\054\004\027\007\010\010\012\011\025" +
    "\012\030\013\031\016\006\017\035\024\014\026\017\027" +
    "\026\030\034\045\036\053\020\055\011\056\005\057\015" +
    "\060\033\061\023\062\022\063\007\001\002\000\054\004" +
    "\027\007\010\010\012\011\025\012\030\013\031\016\006" +
    "\017\035\024\014\026\017\027\026\030\034\045\036\053" +
    "\020\055\011\056\005\057\015\060\033\061\023\062\022" +
    "\063\007\001\002\000\054\004\027\007\010\010\012\011" +
    "\025\012\030\013\031\016\006\017\035\024\014\026\017" +
    "\027\026\030\034\045\036\053\020\055\011\056\005\057" +
    "\015\060\033\061\023\062\022\063\007\001\002\000\126" +
    "\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\001\002\000\054\004\027\007" +
    "\010\010\012\011\025\012\030\013\031\016\006\017\035" +
    "\024\014\026\017\027\026\030\034\045\036\053\020\055" +
    "\011\056\005\057\015\060\033\061\023\062\022\063\007" +
    "\001\002\000\054\004\027\007\010\010\012\011\025\012" +
    "\030\013\031\016\006\017\035\024\014\026\017\027\026" +
    "\030\034\045\036\053\020\055\011\056\005\057\015\060" +
    "\033\061\023\062\022\063\007\001\002\000\054\004\027" +
    "\007\010\010\012\011\025\012\030\013\031\016\006\017" +
    "\035\024\014\026\017\027\026\030\034\045\036\053\020" +
    "\055\011\056\005\057\015\060\033\061\023\062\022\063" +
    "\007\001\002\000\054\004\027\007\010\010\012\011\025" +
    "\012\030\013\031\016\006\017\035\024\014\026\017\027" +
    "\026\030\034\045\036\053\020\055\011\056\005\057\015" +
    "\060\033\061\023\062\022\063\007\001\002\000\054\004" +
    "\027\007\010\010\012\011\025\012\030\013\031\016\006" +
    "\017\035\024\014\026\017\027\026\030\034\045\036\053" +
    "\020\055\011\056\005\057\015\060\033\061\023\062\022" +
    "\063\007\001\002\000\126\002\uffe5\004\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\001" +
    "\002\000\054\004\027\007\010\010\012\011\025\012\030" +
    "\013\031\016\006\017\035\024\014\026\017\027\026\030" +
    "\034\045\036\053\020\055\011\056\005\057\015\060\033" +
    "\061\023\062\022\063\007\001\002\000\054\004\027\007" +
    "\010\010\012\011\025\012\030\013\031\016\006\017\035" +
    "\024\014\026\017\027\026\030\034\045\036\053\020\055" +
    "\011\056\005\057\015\060\033\061\023\062\022\063\007" +
    "\001\002\000\054\004\027\007\010\010\012\011\025\012" +
    "\030\013\031\016\006\017\035\024\014\026\017\027\026" +
    "\030\034\045\036\053\020\055\011\056\005\057\015\060" +
    "\033\061\023\062\022\063\007\001\002\000\054\004\027" +
    "\007\010\010\012\011\025\012\030\013\031\016\006\017" +
    "\035\024\014\026\017\027\026\030\034\045\036\053\020" +
    "\055\011\056\005\057\015\060\033\061\023\062\022\063" +
    "\007\001\002\000\054\004\027\007\010\010\012\011\025" +
    "\012\030\013\031\016\006\017\035\024\014\026\017\027" +
    "\026\030\034\045\036\053\020\055\011\056\005\057\015" +
    "\060\033\061\023\062\022\063\007\001\002\000\112\002" +
    "\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\032\uffee" +
    "\034\uffee\043\040\044\044\045\uffee\046\uffee\047\uffee\051" +
    "\uffee\052\uffee\053\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\001\002\000\112\002\uffeb\004" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\034\uffeb" +
    "\043\040\044\044\045\uffeb\046\uffeb\047\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\001\002\000\126\002\ufff4\004\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\016\ufff4" +
    "\017\ufff4\020\042\021\043\022\ufff4\023\046\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\047\032\ufff4\033\056" +
    "\034\ufff4\036\053\037\057\040\050\041\051\043\040\044" +
    "\044\045\ufff4\046\ufff4\047\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\001\002\000\126\002\uffea\004\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\016\uffea\017\uffea\020" +
    "\042\021\043\022\055\023\046\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\047\032\045\033\056\034\uffea\036" +
    "\053\037\057\040\050\041\051\043\040\044\044\045\uffea" +
    "\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\001\002" +
    "\000\112\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\032\uffec\034\uffec\043\040\044\044\045\uffec\046\uffec" +
    "\047\uffec\051\uffec\052\uffec\053\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\001\002\000\112" +
    "\002\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032" +
    "\uffed\034\uffed\043\040\044\044\045\uffed\046\uffed\047\uffed" +
    "\051\uffed\052\uffed\053\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\001\002\000\112\002\ufff0" +
    "\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\034" +
    "\ufff0\043\040\044\044\045\ufff0\046\ufff0\047\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\001\002\000\112\002\uffef\004\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\034\uffef\043" +
    "\040\044\044\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef" +
    "\053\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\063\uffef\001\002\000\126\002\ufff2\004\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\047\032\ufff2\033\056\034" +
    "\ufff2\036\053\037\057\040\050\041\051\043\040\044\044" +
    "\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\053\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\001\002\000\126\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\016\ufff5\017\ufff5\020\042" +
    "\021\043\022\ufff5\023\046\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\047\032\ufff5\033\056\034\ufff5\036\053" +
    "\037\057\040\050\041\051\043\040\044\044\045\ufff5\046" +
    "\ufff5\047\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\001\002\000" +
    "\126\002\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\047\032\ufff1\033\056\034\ufff1\036\053\037\057\040" +
    "\050\041\051\043\040\044\044\045\ufff1\046\ufff1\047\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\001\002\000\126\002\ufff3" +
    "\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\047\032" +
    "\ufff3\033\056\034\ufff3\036\053\037\057\040\050\041\051" +
    "\043\040\044\044\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\001\002\000\126\002\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9" +
    "\017\uffe9\020\042\021\043\022\055\023\046\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\047\032\045\033\056" +
    "\034\uffe9\036\053\037\057\040\050\041\051\043\040\044" +
    "\044\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\001\002\000\004\035\076\001\002\000\026\004\027" +
    "\005\077\007\010\010\012\011\025\012\030\013\031\014" +
    "\100\015\102\016\104\001\002\000\004\050\105\001\002" +
    "\000\016\004\027\007\010\010\012\011\025\012\030\013" +
    "\031\001\002\000\126\002\ufff7\004\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002" +
    "\000\016\004\027\007\010\010\012\011\025\012\030\013" +
    "\031\001\002\000\126\002\ufff6\004\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002" +
    "\000\004\050\105\001\002\000\056\004\027\007\010\010" +
    "\012\011\025\012\030\013\031\016\006\017\035\024\014" +
    "\026\017\027\026\030\034\045\036\051\ufffc\053\020\055" +
    "\011\056\005\057\015\060\033\061\023\062\022\063\007" +
    "\001\002\000\130\002\uffc4\004\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\001" +
    "\002\000\004\051\110\001\002\000\132\002\uffce\004\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\001\002\000\130\002\uffc2\004" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\001\002\000\130\002\uffc3\004\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\001\002\000\130\002\uffc1\004\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\001\002\000\054\004\027\007\010\010\012" +
    "\011\025\012\030\013\031\016\006\017\035\024\014\026" +
    "\017\027\026\030\034\045\036\053\020\055\011\056\005" +
    "\057\015\060\033\061\023\062\022\063\007\001\002\000" +
    "\042\020\042\021\043\022\055\023\046\025\041\031\047" +
    "\032\045\033\056\034\054\036\053\037\057\040\050\041" +
    "\051\043\040\044\044\047\116\001\002\000\054\004\027" +
    "\007\010\010\012\011\025\012\030\013\031\016\006\017" +
    "\035\024\014\026\017\027\026\030\034\045\036\053\020" +
    "\055\011\056\005\057\015\060\033\061\023\062\022\063" +
    "\007\001\002\000\042\020\042\021\043\022\055\023\046" +
    "\025\041\031\047\032\045\033\056\034\054\036\053\037" +
    "\057\040\050\041\051\043\040\044\044\047\120\001\002" +
    "\000\054\004\027\007\010\010\012\011\025\012\030\013" +
    "\031\016\006\017\035\024\014\026\017\027\026\030\034" +
    "\045\036\053\020\055\011\056\005\057\015\060\033\061" +
    "\023\062\022\063\007\001\002\000\042\020\042\021\043" +
    "\022\055\023\046\025\041\031\047\032\045\033\056\034" +
    "\054\036\053\037\057\040\050\041\051\043\040\044\044" +
    "\046\122\001\002\000\004\050\105\001\002\000\126\002" +
    "\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\001\002\000\056\002\ufffc\004\027" +
    "\007\010\010\012\011\025\012\030\013\031\016\006\017" +
    "\035\024\014\026\017\027\026\030\034\045\036\053\020" +
    "\055\011\056\005\057\015\060\033\061\023\062\022\063" +
    "\007\001\002\000\004\045\126\001\002\000\006\046\uffcb" +
    "\062\127\001\002\000\004\042\133\001\002\000\004\046" +
    "\131\001\002\000\004\050\105\001\002\000\056\002\uffd1" +
    "\004\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\016" +
    "\uffd1\017\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\045\uffd1" +
    "\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\001\002\000\016\004\027\007\010\010\012" +
    "\011\025\012\030\013\031\001\002\000\006\046\uffcd\052" +
    "\135\001\002\000\006\046\uffcb\062\127\001\002\000\004" +
    "\046\uffcc\001\002\000\004\002\uffff\001\002\000\054\004" +
    "\027\007\010\010\012\011\025\012\030\013\031\016\006" +
    "\017\035\024\014\026\017\027\026\030\034\045\036\053" +
    "\020\055\011\056\005\057\015\060\033\061\023\062\022" +
    "\063\007\001\002\000\060\004\027\007\010\010\012\011" +
    "\025\012\030\013\031\016\006\017\035\024\014\026\017" +
    "\027\026\030\034\045\036\046\uffd2\052\uffd2\053\020\055" +
    "\011\056\005\057\015\060\033\061\023\062\022\063\007" +
    "\001\002\000\026\004\027\005\077\007\010\010\012\011" +
    "\025\012\030\013\031\014\100\015\102\016\104\001\002" +
    "\000\130\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\147\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000" +
    "\130\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\145\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001\002\000\054" +
    "\004\027\007\010\010\012\011\025\012\030\013\031\016" +
    "\006\017\035\024\014\026\017\027\026\030\034\045\036" +
    "\053\020\055\011\056\005\057\015\060\033\061\023\062" +
    "\022\063\007\001\002\000\126\002\ufffa\004\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\016\ufffa\017" +
    "\ufffa\020\042\021\043\022\055\023\046\024\ufffa\025\041" +
    "\026\ufffa\027\ufffa\030\ufffa\031\047\032\045\033\056\034" +
    "\054\036\053\037\057\040\050\041\051\043\040\044\044" +
    "\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\001\002\000\054\004\027\007\010\010\012\011\025\012" +
    "\030\013\031\016\006\017\035\024\014\026\017\027\026" +
    "\030\034\045\036\053\020\055\011\056\005\057\015\060" +
    "\033\061\023\062\022\063\007\001\002\000\126\002\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\016\ufff8\017\ufff8\020\042\021\043\022\055\023\046" +
    "\024\ufff8\025\041\026\ufff8\027\ufff8\030\ufff8\031\047\032" +
    "\045\033\056\034\054\036\053\037\057\040\050\041\051" +
    "\043\040\044\044\045\ufff8\046\ufff8\047\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\001\002\000\044\020\042\021\043\022" +
    "\055\023\046\025\041\031\047\032\045\033\056\034\054" +
    "\036\053\037\057\040\050\041\051\043\040\044\044\046" +
    "\uffd4\052\uffd4\001\002\000\006\046\154\052\153\001\002" +
    "\000\060\004\027\007\010\010\012\011\025\012\030\013" +
    "\031\016\006\017\035\024\014\026\017\027\026\030\034" +
    "\045\036\046\uffd2\052\uffd2\053\020\055\011\056\005\057" +
    "\015\060\033\061\023\062\022\063\007\001\002\000\126" +
    "\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\051" +
    "\uffde\052\uffde\053\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\001\002\000\004\046\uffd3\001" +
    "\002\000\126\002\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\016\uffdd\017\uffdd\020\042\021" +
    "\043\022\055\023\046\024\uffdd\025\041\026\uffdd\027\uffdd" +
    "\030\uffdd\031\047\032\045\033\056\034\054\036\053\037" +
    "\057\040\050\041\051\043\040\044\044\045\uffdd\046\uffdd" +
    "\047\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\004" +
    "\002\001\001\002\000\054\004\027\007\010\010\012\011" +
    "\025\012\030\013\031\016\006\017\035\024\014\026\017" +
    "\027\026\030\034\045\036\053\020\055\011\056\005\057" +
    "\015\060\033\061\023\062\022\063\007\001\002\000\042" +
    "\020\042\021\043\022\055\023\046\025\041\031\047\032" +
    "\045\033\056\034\054\036\053\037\057\040\050\041\051" +
    "\043\040\044\044\046\162\001\002\000\004\050\105\001" +
    "\002\000\130\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\051\uffdc\052\uffdc\053\uffdc\054\164\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\001\002" +
    "\000\004\050\105\001\002\000\126\002\uffdb\004\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\001\002\000\112\002\uffd8\004\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\032\uffd8\034\uffd8\043\040\044\044\045" +
    "\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\001" +
    "\002\000\112\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\032\uffe8\034\uffe8\043\040\044\044\045\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000" +
    "\004\045\171\001\002\000\006\046\uffcb\062\127\001\002" +
    "\000\004\046\173\001\002\000\004\050\105\001\002\000" +
    "\126\002\uffcf\004\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\001\002\000\054\004\027" +
    "\007\010\010\012\011\025\012\030\013\031\016\006\017" +
    "\035\024\014\026\017\027\026\030\034\045\036\053\020" +
    "\055\011\056\005\057\015\060\033\061\023\062\022\063" +
    "\007\001\002\000\042\020\042\021\043\022\055\023\046" +
    "\025\041\031\047\032\045\033\056\034\054\036\053\037" +
    "\057\040\050\041\051\043\040\044\044\046\177\001\002" +
    "\000\004\050\105\001\002\000\126\002\uffda\004\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\036\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\001\002\000\004\050\105\001\002\000\126\002\uffd0" +
    "\004\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\001\002\000\062\002\ufffc\004\027\006" +
    "\ufffc\007\010\010\012\011\025\012\030\013\031\016\006" +
    "\017\035\024\014\026\017\027\026\030\034\045\036\051" +
    "\ufffc\053\020\055\011\056\005\057\015\060\033\061\023" +
    "\062\022\063\007\001\002\000\010\002\ufffd\006\ufffd\051" +
    "\ufffd\001\002\000\010\002\ufffe\006\ufffe\051\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\016\002\012\004\020\006\003\007\015\012" +
    "\031\014\023\001\001\000\014\002\012\006\003\007\015" +
    "\012\203\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\012\006" +
    "\166\007\015\014\023\001\001\000\012\002\012\006\165" +
    "\007\015\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\012\006\036" +
    "\007\015\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\012\006\073\007\015\014\023\001\001" +
    "\000\012\002\012\006\072\007\015\014\023\001\001\000" +
    "\012\002\012\006\071\007\015\014\023\001\001\000\002" +
    "\001\001\000\012\002\012\006\070\007\015\014\023\001" +
    "\001\000\012\002\012\006\067\007\015\014\023\001\001" +
    "\000\012\002\012\006\066\007\015\014\023\001\001\000" +
    "\012\002\012\006\065\007\015\014\023\001\001\000\012" +
    "\002\012\006\064\007\015\014\023\001\001\000\002\001" +
    "\001\000\012\002\012\006\063\007\015\014\023\001\001" +
    "\000\012\002\012\006\062\007\015\014\023\001\001\000" +
    "\012\002\012\006\061\007\015\014\023\001\001\000\012" +
    "\002\012\006\060\007\015\014\023\001\001\000\012\002" +
    "\012\006\057\007\015\014\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\102\003\100\001\001\000\004\010\112\001" +
    "\001\000\004\002\111\001\001\000\002\001\001\000\004" +
    "\002\110\001\001\000\002\001\001\000\004\010\105\001" +
    "\001\000\014\002\012\006\003\007\015\012\106\014\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\012\006\114\007\015\014\023\001\001\000" +
    "\002\001\001\000\012\002\012\006\116\007\015\014\023" +
    "\001\001\000\002\001\001\000\012\002\012\006\120\007" +
    "\015\014\023\001\001\000\002\001\001\000\004\010\122" +
    "\001\001\000\002\001\001\000\014\002\012\006\003\007" +
    "\015\012\136\014\023\001\001\000\002\001\001\000\004" +
    "\011\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\131\001\001\000\002\001\001\000\004\002\133" +
    "\001\001\000\002\001\001\000\004\011\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\012\006\155" +
    "\007\015\014\023\001\001\000\014\002\012\005\151\006" +
    "\150\007\015\014\023\001\001\000\006\002\143\003\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\012\006\145\007\015\014\023\001\001\000\002\001\001" +
    "\000\012\002\012\006\147\007\015\014\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\012\005\154\006\150\007\015\014\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\012\006\160\007\015\014\023\001" +
    "\001\000\002\001\001\000\004\010\162\001\001\000\002" +
    "\001\001\000\004\010\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\171\001\001\000\002\001\001\000\004\010\173\001" +
    "\001\000\002\001\001\000\012\002\012\006\175\007\015" +
    "\014\023\001\001\000\002\001\001\000\004\010\177\001" +
    "\001\000\002\001\001\000\004\010\201\001\001\000\002" +
    "\001\001\000\014\002\012\006\003\007\015\012\204\014" +
    "\023\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



       public boolean do_debug_parse = false;

       public void debug_message(String mess)
       {
       	      System.err.println(mess);
       }

       public void syntax_error(Symbol cur_token)
       {
           report_error("Syntax error at character "+(cur_token.right +1)+" on line "+ (cur_token.left+1), null);
       }

       public void unrecovered_syntax_error(Symbol cur_token)
       	      throws java.lang.Exception{
	      report_fatal_error("Couldn't repair and continue parse at character "
                  + (cur_token.right + 1)+ " on line " + (cur_token.left+1), null);
	      }
       

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {
  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // complextype ::= STRUCT codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> structure"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // complextype ::= POINTER type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> ^"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // complextype ::= LIST type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> list of"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // complextype ::= CLASS codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("complextype -> class"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= PROC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> procedure"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= STR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> string"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= BOOL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> boolean"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> float"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> character"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> integer"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameters ::= 
            {
              Object RESULT =null;
		 System.out.println("0 params");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameters ::= ID COLON type COMMA parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		 System.out.println("mult parameters");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameters ::= ID COLON type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("parameter");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // codeblock ::= NEWBLOCK instruction ENDBLOCK 
            {
              Object RESULT =null;
		 System.out.println("codeblock"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("codeblock",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function ::= type ID LPAR parameters RPAR codeblock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 System.out.println("function");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // class ::= CLASS ID codeblock 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("class");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("class",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // main ::= MAIN LPAR parameters RPAR codeblock 
            {
              Object RESULT =null;
		 System.out.println("main declaration");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("main",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameterscall ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameterscall",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameterscall ::= parameterscall COMMA parameterscall 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameterscall",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameterscall ::= declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameterscall",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= class 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("class");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration ::= function 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= EXIT 
            {
              Object RESULT =null;
		 System.out.println("exit");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration ::= RETURN declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("return"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration ::= FOR LPAR declaration SEMIC declaration SEMIC declaration RPAR codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("FOR("+t1+";"+t2+";"+t3+")"+t4);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration ::= WHILE LPAR declaration RPAR codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("while("+t1+")"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaration ::= IF LPAR declaration RPAR codeblock ELSE codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("if("+t1+")"+t2+"else"+t3);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaration ::= IF LPAR declaration RPAR codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("if("+t1+")"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration ::= ID EQ declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("id"+id+"="+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration ::= ID LPAR parameterscall RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("id"+id+"("+t1+")");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("id -->"+id);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= NULL 
            {
              Object RESULT =null;
		 System.out.println("NULL");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration ::= STRING 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("string -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration ::= NB 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("number -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("false");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("true");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration ::= LPAR declaration RPAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("("+t1+")");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration ::= declaration DECR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("DECR"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= declaration INCR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("INCR"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= NOT declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("NOT"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= declaration AND declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"AND"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= declaration OR declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"OR"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= declaration SUP declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"SUP"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= declaration EQUALS declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"EQUALS"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= declaration DIFF declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"DIFF"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= declaration GEQL declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"GEQL"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= declaration INF declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"INF"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= declaration LEQL declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"LEQL"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= declaration MOD declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"MOD"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= declaration DIV declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"DIV"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= declaration MULT declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"MULT"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= declaration MIN declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"MIN"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= declaration PLUS declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"PLUS"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= TP ID EQ type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type id -->"+id+"type -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= TP ID EQ complextype 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type id -->"+id+"complextype -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= ID COLON complextype EQ declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"ctype -->"+t1+"value -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= ID COLON complextype 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"ctype -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= ID COLON type EQ declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"type -->"+t1+"value -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= ID COLON type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"type -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= declaration instruction 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= declaration SEMIC instruction 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= instruction main instruction 
            {
              Object RESULT =null;
		 System.out.println("inst main main");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= instruction 
            {
              Object RESULT =null;
		 System.out.println("inst"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

