
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 14 11:47:14 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 14 11:47:14 CEST 2015
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\004\003\000\002\004" +
    "\005\000\002\013\005\000\002\013\004\000\002\013\002" +
    "\000\002\007\005\000\002\007\007\000\002\007\005\000" +
    "\002\007\007\000\002\007\006\000\002\007\006\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\006\000\002\007\005\000\002" +
    "\007\007\000\002\007\011\000\002\007\007\000\002\007" +
    "\013\000\002\007\004\000\002\007\003\000\002\007\005" +
    "\000\002\007\007\000\002\007\006\000\002\007\003\000" +
    "\002\007\003\000\002\006\003\000\002\006\004\000\002" +
    "\005\003\000\002\005\005\000\002\005\002\000\002\014" +
    "\007\000\002\015\005\000\002\010\010\000\002\011\005" +
    "\000\002\012\005\000\002\012\007\000\002\012\002\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\064\002\ufffc\004\030\006\ufffc\007\010\010" +
    "\012\011\025\012\031\013\032\016\006\017\036\024\014" +
    "\026\017\027\026\030\035\045\037\050\040\053\020\055" +
    "\011\056\004\057\015\060\034\063\023\064\022\065\007" +
    "\066\027\001\002\000\134\002\uffd6\004\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\001\002\000\126\002\ufffc\004\030" +
    "\006\ufffc\007\010\010\012\011\025\012\031\013\032\016" +
    "\006\017\036\020\050\021\051\022\062\023\054\024\014" +
    "\025\047\026\017\027\026\030\035\031\055\032\053\033" +
    "\063\034\061\036\060\037\064\040\056\041\057\043\046" +
    "\044\052\045\037\047\220\050\040\051\ufffc\053\020\055" +
    "\011\056\004\057\015\060\034\063\023\064\022\065\007" +
    "\066\027\001\002\000\004\064\216\001\002\000\134\002" +
    "\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002" +
    "\000\136\002\uffc4\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\001\002\000\004\045\212\001\002\000\136" +
    "\002\uffc3\004\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\001\002\000\004\064\202\001\002\000\060\004\030" +
    "\007\010\010\012\011\025\012\031\013\032\016\006\017" +
    "\036\024\014\026\017\027\026\030\035\045\037\050\040" +
    "\053\020\055\011\056\004\057\015\060\034\063\023\064" +
    "\022\065\007\066\027\001\002\000\060\004\030\007\010" +
    "\010\012\011\025\012\031\013\032\016\006\017\036\024" +
    "\014\026\017\027\026\030\035\045\037\050\040\053\020" +
    "\055\011\056\004\057\015\060\034\063\023\064\022\065" +
    "\007\066\027\001\002\000\134\002\uffd2\004\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\001\002\000\134\002\uffe4\004" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\001\002\000\004" +
    "\045\172\001\002\000\004\002\171\001\002\000\142\002" +
    "\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\147\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\152\043\uffde\044\uffde\045\151\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\150\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\001\002\000\134\002\uffe0\004\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\134\002\uffd1" +
    "\004\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002\000" +
    "\136\002\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\001\002\000\134\002\uffe3\004\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\001\002\000\134\002\uffe1\004\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000\136\002" +
    "\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\001\002\000\136\002\uffc0\004\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\001\002\000\136\002\uffc1\004\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000" +
    "\006\002\000\006\134\001\002\000\004\045\123\001\002" +
    "\000\134\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\001\002\000\004\064\104\001\002\000\060\004\030" +
    "\007\010\010\012\011\025\012\031\013\032\016\006\017" +
    "\036\024\014\026\017\027\026\030\035\045\037\050\040" +
    "\053\020\055\011\056\004\057\015\060\034\063\023\064" +
    "\022\065\007\066\027\001\002\000\062\004\030\007\010" +
    "\010\012\011\025\012\031\013\032\016\006\017\036\024" +
    "\014\026\017\027\026\030\035\045\037\050\040\052\043" +
    "\053\020\055\011\056\004\057\015\060\034\063\023\064" +
    "\022\065\007\066\027\001\002\000\042\020\050\021\051" +
    "\022\062\023\054\025\047\031\055\032\053\033\063\034" +
    "\061\036\060\037\064\040\056\041\057\043\046\044\052" +
    "\051\uffd0\001\002\000\004\051\045\001\002\000\062\004" +
    "\030\007\010\010\012\011\025\012\031\013\032\016\006" +
    "\017\036\024\014\026\017\027\026\030\035\045\037\050" +
    "\040\052\043\053\020\055\011\056\004\057\015\060\034" +
    "\063\023\064\022\065\007\066\027\001\002\000\004\051" +
    "\uffcf\001\002\000\134\002\uffd5\004\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\001\002\000\134\002\uffe7\004\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\001\002\000\060\004\030" +
    "\007\010\010\012\011\025\012\031\013\032\016\006\017" +
    "\036\024\014\026\017\027\026\030\035\045\037\050\040" +
    "\053\020\055\011\056\004\057\015\060\034\063\023\064" +
    "\022\065\007\066\027\001\002\000\060\004\030\007\010" +
    "\010\012\011\025\012\031\013\032\016\006\017\036\024" +
    "\014\026\017\027\026\030\035\045\037\050\040\053\020" +
    "\055\011\056\004\057\015\060\034\063\023\064\022\065" +
    "\007\066\027\001\002\000\060\004\030\007\010\010\012" +
    "\011\025\012\031\013\032\016\006\017\036\024\014\026" +
    "\017\027\026\030\035\045\037\050\040\053\020\055\011" +
    "\056\004\057\015\060\034\063\023\064\022\065\007\066" +
    "\027\001\002\000\134\002\uffe6\004\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\001\002\000\060\004\030\007\010\010" +
    "\012\011\025\012\031\013\032\016\006\017\036\024\014" +
    "\026\017\027\026\030\035\045\037\050\040\053\020\055" +
    "\011\056\004\057\015\060\034\063\023\064\022\065\007" +
    "\066\027\001\002\000\060\004\030\007\010\010\012\011" +
    "\025\012\031\013\032\016\006\017\036\024\014\026\017" +
    "\027\026\030\035\045\037\050\040\053\020\055\011\056" +
    "\004\057\015\060\034\063\023\064\022\065\007\066\027" +
    "\001\002\000\060\004\030\007\010\010\012\011\025\012" +
    "\031\013\032\016\006\017\036\024\014\026\017\027\026" +
    "\030\035\045\037\050\040\053\020\055\011\056\004\057" +
    "\015\060\034\063\023\064\022\065\007\066\027\001\002" +
    "\000\060\004\030\007\010\010\012\011\025\012\031\013" +
    "\032\016\006\017\036\024\014\026\017\027\026\030\035" +
    "\045\037\050\040\053\020\055\011\056\004\057\015\060" +
    "\034\063\023\064\022\065\007\066\027\001\002\000\060" +
    "\004\030\007\010\010\012\011\025\012\031\013\032\016" +
    "\006\017\036\024\014\026\017\027\026\030\035\045\037" +
    "\050\040\053\020\055\011\056\004\057\015\060\034\063" +
    "\023\064\022\065\007\066\027\001\002\000\060\004\030" +
    "\007\010\010\012\011\025\012\031\013\032\016\006\017" +
    "\036\024\014\026\017\027\026\030\035\045\037\050\040" +
    "\053\020\055\011\056\004\057\015\060\034\063\023\064" +
    "\022\065\007\066\027\001\002\000\060\004\030\007\010" +
    "\010\012\011\025\012\031\013\032\016\006\017\036\024" +
    "\014\026\017\027\026\030\035\045\037\050\040\053\020" +
    "\055\011\056\004\057\015\060\034\063\023\064\022\065" +
    "\007\066\027\001\002\000\060\004\030\007\010\010\012" +
    "\011\025\012\031\013\032\016\006\017\036\024\014\026" +
    "\017\027\026\030\035\045\037\050\040\053\020\055\011" +
    "\056\004\057\015\060\034\063\023\064\022\065\007\066" +
    "\027\001\002\000\060\004\030\007\010\010\012\011\025" +
    "\012\031\013\032\016\006\017\036\024\014\026\017\027" +
    "\026\030\035\045\037\050\040\053\020\055\011\056\004" +
    "\057\015\060\034\063\023\064\022\065\007\066\027\001" +
    "\002\000\060\004\030\007\010\010\012\011\025\012\031" +
    "\013\032\016\006\017\036\024\014\026\017\027\026\030" +
    "\035\045\037\050\040\053\020\055\011\056\004\057\015" +
    "\060\034\063\023\064\022\065\007\066\027\001\002\000" +
    "\120\002\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\032\uffee\034\uffee\043\046\044\052\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066" +
    "\uffee\001\002\000\120\002\uffeb\004\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\032\uffeb\034\uffeb\043\046\044\052\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\001\002\000\134\002\ufff4\004\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\016" +
    "\ufff4\017\ufff4\020\050\021\051\022\ufff4\023\054\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\055\032\ufff4\033" +
    "\063\034\ufff4\036\060\037\064\040\056\041\057\043\046" +
    "\044\052\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\001\002\000\134\002" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\016\uffea\017\uffea\020\050\021\051\022\062\023" +
    "\054\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\055" +
    "\032\053\033\063\034\uffea\036\060\037\064\040\056\041" +
    "\057\043\046\044\052\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\001\002" +
    "\000\120\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\032\uffec\034\uffec\043\046\044\052\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\062\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\001\002\000\120\002\uffed\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\032\uffed\034\uffed\043\046\044\052" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\062\uffed\063\uffed" +
    "\064\uffed\065\uffed\066\uffed\001\002\000\120\002\ufff0\004" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\034\ufff0" +
    "\043\046\044\052\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\001\002\000" +
    "\120\002\uffef\004\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\032\uffef\034\uffef\043\046\044\052\045\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\001\002\000\134\002\ufff2\004\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\055\032\ufff2\033\063\034\ufff2\036" +
    "\060\037\064\040\056\041\057\043\046\044\052\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\001\002\000\134\002\ufff5\004\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\016\ufff5" +
    "\017\ufff5\020\050\021\051\022\ufff5\023\054\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\055\032\ufff5\033\063" +
    "\034\ufff5\036\060\037\064\040\056\041\057\043\046\044" +
    "\052\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\001\002\000\134\002\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\055\032" +
    "\ufff1\033\063\034\ufff1\036\060\037\064\040\056\041\057" +
    "\043\046\044\052\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\001\002\000" +
    "\134\002\ufff3\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\055\032\ufff3\033\063\034\ufff3\036\060\037\064\040" +
    "\056\041\057\043\046\044\052\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\001\002\000\134\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\017\uffe9\020\050" +
    "\021\051\022\062\023\054\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\055\032\053\033\063\034\uffe9\036\060" +
    "\037\064\040\056\041\057\043\046\044\052\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\062\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\001\002\000\042\020\050\021\051\022\062" +
    "\023\054\025\047\031\055\032\053\033\063\034\061\036" +
    "\060\037\064\040\056\041\057\043\046\044\052\046\103" +
    "\001\002\000\134\002\uffe5\004\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\001\002\000\004\035\105\001\002\000\026" +
    "\004\030\005\106\007\010\010\012\011\025\012\031\013" +
    "\032\014\107\015\111\016\113\001\002\000\004\050\114" +
    "\001\002\000\016\004\030\007\010\010\012\011\025\012" +
    "\031\013\032\001\002\000\134\002\ufff7\004\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\001\002\000\016\004\030\007" +
    "\010\010\012\011\025\012\031\013\032\001\002\000\134" +
    "\002\ufff6\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001" +
    "\002\000\004\050\114\001\002\000\062\004\030\007\010" +
    "\010\012\011\025\012\031\013\032\016\006\017\036\024" +
    "\014\026\017\027\026\030\035\045\037\050\040\051\ufffc" +
    "\053\020\055\011\056\004\057\015\060\034\063\023\064" +
    "\022\065\007\066\027\001\002\000\136\002\uffbe\004\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000" +
    "\004\051\117\001\002\000\140\002\uffc8\004\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\001\002\000" +
    "\136\002\uffbc\004\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\001\002\000\136\002\uffbd\004\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\136\002\uffbb" +
    "\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001" +
    "\002\000\060\004\030\007\010\010\012\011\025\012\031" +
    "\013\032\016\006\017\036\024\014\026\017\027\026\030" +
    "\035\045\037\050\040\053\020\055\011\056\004\057\015" +
    "\060\034\063\023\064\022\065\007\066\027\001\002\000" +
    "\042\020\050\021\051\022\062\023\054\025\047\031\055" +
    "\032\053\033\063\034\061\036\060\037\064\040\056\041" +
    "\057\043\046\044\052\047\125\001\002\000\060\004\030" +
    "\007\010\010\012\011\025\012\031\013\032\016\006\017" +
    "\036\024\014\026\017\027\026\030\035\045\037\050\040" +
    "\053\020\055\011\056\004\057\015\060\034\063\023\064" +
    "\022\065\007\066\027\001\002\000\042\020\050\021\051" +
    "\022\062\023\054\025\047\031\055\032\053\033\063\034" +
    "\061\036\060\037\064\040\056\041\057\043\046\044\052" +
    "\047\127\001\002\000\060\004\030\007\010\010\012\011" +
    "\025\012\031\013\032\016\006\017\036\024\014\026\017" +
    "\027\026\030\035\045\037\050\040\053\020\055\011\056" +
    "\004\057\015\060\034\063\023\064\022\065\007\066\027" +
    "\001\002\000\042\020\050\021\051\022\062\023\054\025" +
    "\047\031\055\032\053\033\063\034\061\036\060\037\064" +
    "\040\056\041\057\043\046\044\052\046\131\001\002\000" +
    "\004\050\114\001\002\000\134\002\uffd8\004\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\001\002\000\062\002\ufffc\004" +
    "\030\007\010\010\012\011\025\012\031\013\032\016\006" +
    "\017\036\024\014\026\017\027\026\030\035\045\037\050" +
    "\040\053\020\055\011\056\004\057\015\060\034\063\023" +
    "\064\022\065\007\066\027\001\002\000\004\045\135\001" +
    "\002\000\006\046\uffc5\064\136\001\002\000\004\042\142" +
    "\001\002\000\004\046\140\001\002\000\004\050\114\001" +
    "\002\000\062\002\uffcb\004\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\016\uffcb\017\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\045\uffcb\050\uffcb\053\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001" +
    "\002\000\016\004\030\007\010\010\012\011\025\012\031" +
    "\013\032\001\002\000\006\046\uffc7\052\144\001\002\000" +
    "\006\046\uffc5\064\136\001\002\000\004\046\uffc6\001\002" +
    "\000\004\002\uffff\001\002\000\060\004\030\007\010\010" +
    "\012\011\025\012\031\013\032\016\006\017\036\024\014" +
    "\026\017\027\026\030\035\045\037\050\040\053\020\055" +
    "\011\056\004\057\015\060\034\063\023\064\022\065\007" +
    "\066\027\001\002\000\060\004\030\007\010\010\012\011" +
    "\025\012\031\013\032\016\006\017\036\024\014\026\017" +
    "\027\026\030\035\045\037\050\040\053\020\055\011\056" +
    "\004\057\015\060\034\063\023\064\022\065\007\066\027" +
    "\001\002\000\064\004\030\007\010\010\012\011\025\012" +
    "\031\013\032\016\006\017\036\024\014\026\017\027\026" +
    "\030\035\045\037\046\uffcc\050\040\052\uffcc\053\020\055" +
    "\011\056\004\057\015\060\034\063\023\064\022\065\007" +
    "\066\027\001\002\000\026\004\030\005\106\007\010\010" +
    "\012\011\025\012\031\013\032\014\107\015\111\016\113" +
    "\001\002\000\136\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\157" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\060\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\001\002\000\136\002\ufffb\004\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\155\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\001\002\000" +
    "\060\004\030\007\010\010\012\011\025\012\031\013\032" +
    "\016\006\017\036\024\014\026\017\027\026\030\035\045" +
    "\037\050\040\053\020\055\011\056\004\057\015\060\034" +
    "\063\023\064\022\065\007\066\027\001\002\000\134\002" +
    "\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\016\ufffa\017\ufffa\020\050\021\051\022\062\023" +
    "\054\024\ufffa\025\047\026\ufffa\027\ufffa\030\ufffa\031\055" +
    "\032\053\033\063\034\061\036\060\037\064\040\056\041" +
    "\057\043\046\044\052\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\001\002" +
    "\000\060\004\030\007\010\010\012\011\025\012\031\013" +
    "\032\016\006\017\036\024\014\026\017\027\026\030\035" +
    "\045\037\050\040\053\020\055\011\056\004\057\015\060" +
    "\034\063\023\064\022\065\007\066\027\001\002\000\134" +
    "\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\016\ufff8\017\ufff8\020\050\021\051\022\062" +
    "\023\054\024\ufff8\025\047\026\ufff8\027\ufff8\030\ufff8\031" +
    "\055\032\053\033\063\034\061\036\060\037\064\040\056" +
    "\041\057\043\046\044\052\045\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\001" +
    "\002\000\044\020\050\021\051\022\062\023\054\025\047" +
    "\031\055\032\053\033\063\034\061\036\060\037\064\040" +
    "\056\041\057\043\046\044\052\046\uffce\052\uffce\001\002" +
    "\000\006\046\164\052\163\001\002\000\064\004\030\007" +
    "\010\010\012\011\025\012\031\013\032\016\006\017\036" +
    "\024\014\026\017\027\026\030\035\045\037\046\uffcc\050" +
    "\040\052\uffcc\053\020\055\011\056\004\057\015\060\034" +
    "\063\023\064\022\065\007\066\027\001\002\000\134\002" +
    "\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\001\002" +
    "\000\004\046\uffcd\001\002\000\042\020\050\021\051\022" +
    "\062\023\054\025\047\031\055\032\053\033\063\034\061" +
    "\036\060\037\064\040\056\041\057\043\046\044\052\062" +
    "\167\001\002\000\134\002\uffd3\004\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\001\002\000\134\002\uffdc\004\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\016\uffdc" +
    "\017\uffdc\020\050\021\051\022\062\023\054\024\uffdc\025" +
    "\047\026\uffdc\027\uffdc\030\uffdc\031\055\032\053\033\063" +
    "\034\061\036\060\037\064\040\056\041\057\043\046\044" +
    "\052\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002\000\004\002\001" +
    "\001\002\000\060\004\030\007\010\010\012\011\025\012" +
    "\031\013\032\016\006\017\036\024\014\026\017\027\026" +
    "\030\035\045\037\050\040\053\020\055\011\056\004\057" +
    "\015\060\034\063\023\064\022\065\007\066\027\001\002" +
    "\000\042\020\050\021\051\022\062\023\054\025\047\031" +
    "\055\032\053\033\063\034\061\036\060\037\064\040\056" +
    "\041\057\043\046\044\052\046\174\001\002\000\004\050" +
    "\114\001\002\000\136\002\uffdb\004\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\176\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\001\002\000\004\050\114\001" +
    "\002\000\134\002\uffda\004\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\062\uffda\063\uffda\064\uffda\065\uffda" +
    "\066\uffda\001\002\000\120\002\uffd7\004\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\032\uffd7\034\uffd7\043\046\044\052" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\001\002\000\120\002\uffe8\004" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\034\uffe8" +
    "\043\046\044\052\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\001\002\000" +
    "\006\045\204\061\203\001\002\000\060\004\030\007\010" +
    "\010\012\011\025\012\031\013\032\016\006\017\036\024" +
    "\014\026\017\027\026\030\035\045\037\050\040\053\020" +
    "\055\011\056\004\057\015\060\034\063\023\064\022\065" +
    "\007\066\027\001\002\000\006\046\uffc5\064\136\001\002" +
    "\000\004\046\206\001\002\000\004\050\114\001\002\000" +
    "\134\002\uffc9\004\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\001\002\000\042\020\050\021\051\022\062\023\054\025" +
    "\047\031\055\032\053\033\063\034\061\036\060\037\064" +
    "\040\056\041\057\043\046\044\052\062\211\001\002\000" +
    "\134\002\uffd4\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\001\002\000\060\004\030\007\010\010\012\011\025\012" +
    "\031\013\032\016\006\017\036\024\014\026\017\027\026" +
    "\030\035\045\037\050\040\053\020\055\011\056\004\057" +
    "\015\060\034\063\023\064\022\065\007\066\027\001\002" +
    "\000\042\020\050\021\051\022\062\023\054\025\047\031" +
    "\055\032\053\033\063\034\061\036\060\037\064\040\056" +
    "\041\057\043\046\044\052\046\214\001\002\000\004\050" +
    "\114\001\002\000\134\002\uffd9\004\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\001\002\000\004\050\114\001\002\000" +
    "\134\002\uffca\004\uffca\006\uffca\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\001\002\000\066\002\ufffc\004\030\006\ufffc\007\010\010" +
    "\012\011\025\012\031\013\032\016\006\017\036\024\014" +
    "\026\017\027\026\030\035\045\037\050\040\051\ufffc\053" +
    "\020\055\011\056\004\057\015\060\034\063\023\064\022" +
    "\065\007\066\027\001\002\000\010\002\ufffd\006\ufffd\051" +
    "\ufffd\001\002\000\010\002\ufffe\006\ufffe\051\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\016\002\012\004\020\007\004\010\015\013" +
    "\032\015\023\001\001\000\002\001\001\000\014\002\012" +
    "\007\004\010\015\013\220\015\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\012\007" +
    "\200\010\015\015\023\001\001\000\012\002\012\007\177" +
    "\010\015\015\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\012\007\101\010\015\015\023\001\001\000\014\002" +
    "\012\006\041\007\040\010\015\015\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\012\006\043\007" +
    "\040\010\015\015\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\012\007\100\010" +
    "\015\015\023\001\001\000\012\002\012\007\077\010\015" +
    "\015\023\001\001\000\012\002\012\007\076\010\015\015" +
    "\023\001\001\000\002\001\001\000\012\002\012\007\075" +
    "\010\015\015\023\001\001\000\012\002\012\007\074\010" +
    "\015\015\023\001\001\000\012\002\012\007\073\010\015" +
    "\015\023\001\001\000\012\002\012\007\072\010\015\015" +
    "\023\001\001\000\012\002\012\007\071\010\015\015\023" +
    "\001\001\000\012\002\012\007\070\010\015\015\023\001" +
    "\001\000\012\002\012\007\067\010\015\015\023\001\001" +
    "\000\012\002\012\007\066\010\015\015\023\001\001\000" +
    "\012\002\012\007\065\010\015\015\023\001\001\000\012" +
    "\002\012\007\064\010\015\015\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\111" +
    "\003\107\001\001\000\004\011\121\001\001\000\004\002" +
    "\120\001\001\000\002\001\001\000\004\002\117\001\001" +
    "\000\002\001\001\000\004\011\114\001\001\000\014\002" +
    "\012\007\004\010\015\013\115\015\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\012" +
    "\007\123\010\015\015\023\001\001\000\002\001\001\000" +
    "\012\002\012\007\125\010\015\015\023\001\001\000\002" +
    "\001\001\000\012\002\012\007\127\010\015\015\023\001" +
    "\001\000\002\001\001\000\004\011\131\001\001\000\002" +
    "\001\001\000\014\002\012\007\004\010\015\013\145\015" +
    "\023\001\001\000\002\001\001\000\004\012\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\140\001" +
    "\001\000\002\001\001\000\004\002\142\001\001\000\002" +
    "\001\001\000\004\012\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\012\007\167\010\015\015\023" +
    "\001\001\000\012\002\012\007\165\010\015\015\023\001" +
    "\001\000\014\002\012\005\161\007\160\010\015\015\023" +
    "\001\001\000\006\002\153\003\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\012\007\155\010\015" +
    "\015\023\001\001\000\002\001\001\000\012\002\012\007" +
    "\157\010\015\015\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\012\005\164\007" +
    "\160\010\015\015\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\012\007\172\010\015" +
    "\015\023\001\001\000\002\001\001\000\004\011\174\001" +
    "\001\000\002\001\001\000\004\011\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\012\007\207\010\015\015\023\001\001" +
    "\000\004\012\204\001\001\000\002\001\001\000\004\011" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\012\007\212\010\015\015\023\001" +
    "\001\000\002\001\001\000\004\011\214\001\001\000\002" +
    "\001\001\000\004\011\216\001\001\000\002\001\001\000" +
    "\014\002\012\007\004\010\015\013\221\015\023\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



       public boolean do_debug_parse = false;

       public void debug_message(String mess)
       {
       	      System.err.println(mess);
       }

       public void syntax_error(Symbol cur_token)
       {
           report_error("Syntax error at character "+(cur_token.right +1)+" on line "+ (cur_token.left+1), null);
       }

       public void unrecovered_syntax_error(Symbol cur_token)
       	      throws java.lang.Exception{
	      report_fatal_error("Couldn't repair and continue parse at character "
                  + (cur_token.right + 1)+ " on line " + (cur_token.left+1), null);
	      }
       

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {
  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // complextype ::= STRUCT codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> structure"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // complextype ::= POINTER type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> ^"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // complextype ::= LIST type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> list of"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // complextype ::= CLASS codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("complextype -> class"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= PROC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> procedure"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= STR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> string"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= BOOL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> boolean"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> float"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> character"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> integer"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameters ::= 
            {
              Object RESULT =null;
		 System.out.println("0 params");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameters ::= ID COLON type COMMA parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		 System.out.println("mult parameters");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameters ::= ID COLON type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("parameter");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // codeblock ::= NEWBLOCK instruction ENDBLOCK 
            {
              Object RESULT =null;
		 System.out.println("codeblock"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("codeblock",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function ::= type ID LPAR parameters RPAR codeblock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 System.out.println("function");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("function",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // class ::= CLASS ID codeblock 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("class");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("class",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // main ::= MAIN LPAR parameters RPAR codeblock 
            {
              Object RESULT =null;
		 System.out.println("main declaration");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("main",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameterscall ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameterscall",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameterscall ::= parameterscall COMMA parameterscall 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameterscall",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameterscall ::= declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameterscall",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // initivalue ::= COMMA initivalue 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("initivalue",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // initivalue ::= declaration 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("initivalue",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration ::= class 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("class");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration ::= function 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= ID SBRKL declaration SBRKR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration ::= type ID SBRKL declaration SBRKR 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= NEWBLOCK initivalue ENDBLOCK 
            {
              Object RESULT =null;
		 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration ::= EXIT 
            {
              Object RESULT =null;
		 System.out.println("exit");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= RETURN declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("return"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration ::= FOR LPAR declaration SEMIC declaration SEMIC declaration RPAR codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("FOR("+t1+";"+t2+";"+t3+")"+t4);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration ::= WHILE LPAR declaration RPAR codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("while("+t1+")"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration ::= IF LPAR declaration RPAR codeblock ELSE codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("if("+t1+")"+t2+"else"+t3);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaration ::= IF LPAR declaration RPAR codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("if("+t1+")"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaration ::= ID EQ declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("id"+id+"="+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration ::= ID LPAR parameterscall RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("id"+id+"("+t1+")");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("id -->"+id);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= NULL 
            {
              Object RESULT =null;
		 System.out.println("NULL");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= STRING 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("string -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration ::= FLOATNB 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Float t1 = (Float)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("number -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration ::= NB 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("number -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("false");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("true");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration ::= LPAR declaration RPAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("("+t1+")");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration ::= declaration DECR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("DECR"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= declaration INCR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("INCR"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= NOT declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("NOT"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= declaration AND declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"AND"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= declaration OR declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"OR"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= declaration SUP declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"SUP"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= declaration EQUALS declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"EQUALS"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= declaration DIFF declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"DIFF"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= declaration GEQL declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"GEQL"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= declaration INF declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"INF"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= declaration LEQL declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"LEQL"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= declaration MOD declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"MOD"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= declaration DIV declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"DIV"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= declaration MULT declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"MULT"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= declaration MIN declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"MIN"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= declaration PLUS declaration 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t1+"PLUS"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= TP ID EQ type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type id -->"+id+"type -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= TP ID EQ complextype 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type id -->"+id+"complextype -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= ID COLON complextype EQ declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"ctype -->"+t1+"value -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= ID COLON complextype 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"ctype -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= ID COLON type EQ declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"type -->"+t1+"value -->"+t2);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= ID COLON type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("dec -->"+id+"type -->"+t1);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= declaration instruction 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= declaration SEMIC instruction 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= instruction main instruction 
            {
              Object RESULT =null;
		 System.out.println("inst main main");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= instruction 
            {
              Object RESULT =null;
		 System.out.println("inst"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

