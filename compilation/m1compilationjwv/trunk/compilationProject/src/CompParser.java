
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 25 10:45:32 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 25 10:45:32 CEST 2015
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\012\003\000\002\012" +
    "\005\000\002\020\004\000\002\020\002\000\002\013\006" +
    "\000\002\013\010\000\002\013\006\000\002\013\007\000" +
    "\002\013\007\000\002\013\003\000\002\021\007\000\002" +
    "\014\010\000\002\015\005\000\002\017\004\000\002\017" +
    "\006\000\002\017\002\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\026\002\ufffd\004\014\006\ufffd\007\005\010" +
    "\020\011\017\012\010\013\006\017\011\057\015\001\002" +
    "\000\006\002\000\006\071\001\002\000\014\035\uffed\044" +
    "\uffed\045\uffed\050\uffed\057\uffed\001\002\000\014\035\uffea" +
    "\044\uffea\045\uffea\050\uffea\057\uffea\001\002\000\030\002" +
    "\ufffd\004\014\006\ufffd\007\005\010\020\011\017\012\010" +
    "\013\006\017\011\047\ufffd\057\015\001\002\000\014\035" +
    "\uffe9\044\uffe9\045\uffe9\050\uffe9\057\uffe9\001\002\000\004" +
    "\057\061\001\002\000\004\002\060\001\002\000\030\002" +
    "\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\017\ufff7\047\ufff7\057\ufff7\001\002\000\014\035" +
    "\uffe8\044\uffe8\045\uffe8\050\uffe8\057\uffe8\001\002\000\004" +
    "\042\035\001\002\000\004\057\021\001\002\000\014\035" +
    "\uffeb\044\uffeb\045\uffeb\050\uffeb\057\uffeb\001\002\000\014" +
    "\035\uffec\044\uffec\045\uffec\050\uffec\057\uffec\001\002\000" +
    "\004\043\022\001\002\000\006\044\ufff1\057\023\001\002" +
    "\000\016\004\014\007\005\010\020\011\017\012\010\013" +
    "\006\001\002\000\004\044\025\001\002\000\004\046\026" +
    "\001\002\000\024\004\014\007\005\010\020\011\017\012" +
    "\010\013\006\017\011\047\ufffd\057\015\001\002\000\030" +
    "\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\017\ufff5\047\ufff5\057\ufff5\001\002\000\004" +
    "\047\031\001\002\000\032\002\ufff4\004\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\017\ufff4\045\ufff4" +
    "\047\ufff4\057\ufff4\001\002\000\006\044\ufff3\050\033\001" +
    "\002\000\006\044\ufff1\057\023\001\002\000\004\044\ufff2" +
    "\001\002\000\026\004\014\005\036\007\005\010\020\011" +
    "\017\012\010\013\006\014\037\015\041\016\043\001\002" +
    "\000\004\046\026\001\002\000\016\004\014\007\005\010" +
    "\020\011\017\012\010\013\006\001\002\000\004\045\055" +
    "\001\002\000\016\004\014\007\005\010\020\011\017\012" +
    "\010\013\006\001\002\000\006\035\045\045\046\001\002" +
    "\000\004\046\026\001\002\000\004\045\uffe7\001\002\000" +
    "\010\056\051\057\047\060\050\001\002\000\030\002\ufffc" +
    "\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\017\ufffc\047\ufffc\057\ufffc\001\002\000\004\045\ufff0" +
    "\001\002\000\004\045\uffee\001\002\000\004\045\uffef\001" +
    "\002\000\004\045\053\001\002\000\030\002\ufffb\004\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\017" +
    "\ufffb\047\ufffb\057\ufffb\001\002\000\004\045\uffe5\001\002" +
    "\000\030\002\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\017\ufffa\047\ufffa\057\ufffa\001\002" +
    "\000\004\045\uffe6\001\002\000\004\045\uffe4\001\002\000" +
    "\004\002\001\001\002\000\004\035\062\001\002\000\026" +
    "\004\014\005\036\007\005\010\020\011\017\012\010\013" +
    "\006\014\037\015\041\016\043\001\002\000\004\045\066" +
    "\001\002\000\004\045\065\001\002\000\030\002\ufff8\004" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\017\ufff8\047\ufff8\057\ufff8\001\002\000\030\002\ufff9\004" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\017\ufff9\047\ufff9\057\ufff9\001\002\000\010\002\ufffe\006" +
    "\ufffe\047\ufffe\001\002\000\024\002\ufffd\004\014\007\005" +
    "\010\020\011\017\012\010\013\006\017\011\057\015\001" +
    "\002\000\004\043\072\001\002\000\006\044\ufff1\057\023" +
    "\001\002\000\004\044\074\001\002\000\004\046\026\001" +
    "\002\000\024\002\ufff6\004\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\017\ufff6\057\ufff6\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\014\010\015\012\011\013\006\014\012\020" +
    "\003\001\001\000\004\021\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\015\013\006\014\012\020" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\023\001\001\000\004\010" +
    "\031\001\001\000\002\001\001\000\004\015\026\001\001" +
    "\000\012\010\015\013\006\014\012\020\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\033\001\001\000\002\001\001\000" +
    "\006\010\041\011\037\001\001\000\004\015\056\001\001" +
    "\000\004\010\055\001\001\000\002\001\001\000\004\010" +
    "\053\001\001\000\002\001\001\000\004\015\043\001\001" +
    "\000\002\001\001\000\004\016\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\063\011\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\015\013" +
    "\006\014\012\020\075\001\001\000\002\001\001\000\004" +
    "\017\072\001\001\000\002\001\001\000\004\015\074\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



       public boolean do_debug_parse = false;

       public void debug_message(String mess)
       {
       	      System.err.println(mess);
       }

       public void syntax_error(Symbol cur_token)
       {
       report_error("Syntax error at character "+(cur_token.right +1)+" on line "+ (cur_token.left+1), null);
       }

       public void unrecovered_syntax_error(Symbol cur_token)
       	      throws java.lang.Exception{
	      report_fatal_error("Couldn't repair and continue parse at character "
                  + (cur_token.right + 1)+ " on line " + (cur_token.left+1), null);
	      }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {
  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // complextype ::= STRUCT codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> structure"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // complextype ::= POINTER type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> ^"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // complextype ::= LIST type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("complextype -> list of"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // complextype ::= CLASS codeblock 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("complextype -> class"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("complextype",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= PROC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> procedure"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= STR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> string"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BOOL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> boolean"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> float"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> character"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("type -> integer"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // value ::= NB 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("value",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // value ::= STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("value",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println(t);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("value",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameters ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= ID type COMMA parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		 System.out.println("mult parameters");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= ID type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 System.out.println("parameter");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codeblock ::= NEWBLOCK instruction ENDBLOCK 
            {
              Object RESULT =null;
		 System.out.println("codeblock"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("codeblock",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= type ID LPAR parameters RPAR codeblock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 System.out.println("function");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main ::= MAIN LPAR parameters RPAR codeblock 
            {
              Object RESULT =null;
		 System.out.println("main declaration");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("main",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= function 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= TP ID EQ type SEMIC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 System.out.println("dec -> complex dec init");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= TP ID EQ complextype SEMIC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 System.out.println("dec -> complex dec init");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= ID COLON complextype SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 System.out.println("dec -> complex dec not init");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= ID COLON type EQ value SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 System.out.println("dec -> dec init");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= ID COLON type SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 System.out.println("dec -> dec not init");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= declaration instruction 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("instruction",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= instruction main instruction 
            {
              Object RESULT =null;
		 System.out.println("inst main main");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= instruction 
            {
              Object RESULT =null;
		 System.out.println("inst"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

